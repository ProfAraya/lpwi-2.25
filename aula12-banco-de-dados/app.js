// 1. Importar a versÃ£o "promise" do mysql2
const mysql = require('mysql2/promise');

// 2. Configurar o Pool de ConexÃµes
// (Um "pool" gerencia mÃºltiplas conexÃµes, Ã© a melhor prÃ¡tica para aplicaÃ§Ãµes web)
const pool = mysql.createPool({
    host: 'localhost',       // O endereÃ§o do seu servidor MySQL (ex: 127.0.0.1)
    user: 'root',     // Seu usuÃ¡rio do MySQL (ex: 'root')
    port: 3307,
    password: '',   // Sua senha do MySQL
    database: 'cadastro',   // O nome do banco de dados que vocÃª quer acessar
    waitForConnections: true,
    connectionLimit: 10,     // Limite de conexÃµes no pool
    queueLimit: 0
});

// 3. FunÃ§Ã£o principal assÃ­ncrona para executar a consulta
async function consultarUsuarios() {
    let connection;
    try {
        // 4. Obter uma conexÃ£o do pool
        connection = await pool.getConnection();
        console.log("ðŸŽ‰ ConexÃ£o ao MySQL estabelecida com sucesso!");

        // 5. Executar a consulta (Query)
        // (Vamos selecionar todos os usuÃ¡rios da tabela 'usuarios')
        const [rows, fields] = await connection.execute('SELECT * FROM usuarios');

        // 6. Processar e exibir os resultados
        console.log("Resultados da consulta:");
        console.log(rows); // 'rows' Ã© um array de objetos

        console.log("\nLista de UsuÃ¡rios:");
        rows.forEach(usuario => {
            console.log(`- ID: ${usuario.id}, Nome: ${usuario.nome}, Email: ${usuario.email}`);
        });

    } catch (error) {
        // 7. Lidar com erros
        console.error("Erro ao consultar o MySQL:", error);
    } finally {
        // 8. Garantir que a conexÃ£o seja liberada de volta para o pool
        if (connection) {
            connection.release();
            console.log("\nConexÃ£o liberada.");
        }
    }
}

// 9. Chamar a funÃ§Ã£o para rodar o script
consultarUsuarios();

// Em um script simples como este, vocÃª pode querer fechar o pool
// Em um servidor web (como com Express), vocÃª deixaria o pool aberto
// setTimeout(() => pool.end(), 2000);